Usage guide

This application is a command-line tool that a supermarket can use to keep track of their inventory. The core functionality is about keeping track and producing reports on various kinds of data. There's several commands that the application can take, and they will be explained in this document.

1. setdate
The setdate command can be used to set the application to a specific date. The date the application is set to is being saved in a csv file called 'datevalue'. The command can be used by writing it followed by --value and the date in YYYY-MM-DD configuration.
Example: python3 super_revision.py setdate 2021-04-26

2. printdate
The printdate command can be used to check what date the application is currently set to.
Example: python3 super_revision.py printdate

3. adjustdate
The adjustdate command can be used to adjust the current date with x number of days. You can use the command writing it followed by the value (positive or negative) you wish the date is adjusted to.
Example: python3 super_revision.py adjustdate -2

4. buyitem
This command is being used to buy stock for the supermarket. It requires to give the name of the product, the price for which the item was bought, and the expirydate. Each product buy will be stored in a csv file called 'bought' together with a unique buy-id.
Example: python3 super_revision.py buyitem apple 1.2 2021-06-01

5. sellitem
This command can be used to sell items from the stock of the supermarket. It needs additional arguments product name and price. The sold item will be stored in a csv file called 'sold' together with the buy id. As the supermarkets in our company work with the fifo (first in, first out) principle, the first non-expired item (so lowest buy-id) will be put into the sold file. If there is no stock items of the product, the application will return an error message saying there are no products that can be sold.
Example: python3 super_revision.py sellitem apple 1.5

6. reportinventory
This command can report the inventory. It can be listed for the current day the application is set to (in that case, use argument: now), or for the day before (use argument: yesterday)
Example: python3 super_revision.py reportinventory now

7. reportinventorypdf
This command can report the inventory in a PDF format. It can be used with the same arguments as 6. reportinventory.
Example: python3 super_revision.py reportinventorypdf yesterday

8. reportrevenue
The report_revenue command returns the revenue of either 'today' (so far) or 'yesterday'. It calculates the sum of all the products that have been sold on the specified date.
Example: python3 super_revision.py reportrevenue today

9. reportrevenuefrom
With this command the revenue over a specific period of time can be calculated. The user should set the program to the desired end date by using the `setdate` or the `adjustdate` command. After the `revenue_from` the desired starting date can be used as an input.
Example: python3 super_revision.py reportrevenuefrom 2021-04-01

10. reportprofit
The reportprofit command returns the revenue MINUS the expenses of either 'today' (so far) or 'yesterday'. It calculates the sum of all the products that have been sold minus the sum of all the items that have been bought on the specified date.
Example: Example: python3 super_revision.py reportprofit today

11. reportprofitfrom
With this command the profit over a specific period of time can be calculated. The user should set the program to the desired end date by using the `setdate` or the `adjustdate` command. After the `reportprofitfrom` the desired starting date can be used as an input.
Example: python3 super_revision.py reportprofitfrom 2021-04-01

12. expirycheck
With this command, a list of items that will expire within x days from the date the application is currently set to can be generated. The command will generate a csv file called 'to_get_expired'. It needs the argument 'value' followed by a number of days.
Example: python3 super_revision.py expirycheck 3

